services:

  ${full_app_name}-http:
    image: $${DOCKERHUB_USERNAME}/$${APP_NAME}-http:$${IMAGE_TAG:-latest}
    networks:
      - accessible
      - app
    healthcheck:
      test: ["CMD-SHELL", "wget -qO /dev/null localhost:8080/api/actuator/health || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 60s
    environment:
      - DOPPLER_TOKEN=$${DOPPLER_TOKEN}
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
      rollback_config:
        order: start-first
      update_config:
        order: start-first
        failure_action: rollback
      labels:
        - traefik.enable=true
        - traefik.http.routers.${full_app_name}-http.rule=Host(`$${APP_URL}`)
        - traefik.http.routers.${full_app_name}-http.entrypoints=websecure
        - traefik.http.services.${full_app_name}-http.loadbalancer.server.port=8080

  ${full_app_name}-queue:
    image: $${DOCKERHUB_USERNAME}/$${APP_NAME}-queue:$${IMAGE_TAG:-latest}
    networks:
      - app
    healthcheck:
      test: ["CMD-SHELL", "wget -qO /dev/null localhost:8081/api/actuator/health || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 60s
    environment:
      - DOPPLER_TOKEN=$${DOPPLER_TOKEN}
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
      rollback_config:
        order: start-first
      update_config:
        order: start-first
        failure_action: rollback

  ${full_app_name}-scheduler:
    image: $${DOCKERHUB_USERNAME}/$${APP_NAME}-scheduler:$${IMAGE_TAG:-latest}
    networks:
      - app
    healthcheck:
      test: ["CMD-SHELL", "wget -qO /dev/null localhost:8082/api/actuator/health || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 60s
    environment:
      - DOPPLER_TOKEN=$${DOPPLER_TOKEN}
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
      rollback_config:
        order: start-first
      update_config:
        order: start-first
        failure_action: rollback

  ${full_app_name}-db:
    image: "mysql/mysql-server:8.0"
    environment:
      MYSQL_ROOT_PASSWORD: "$${DB_ROOT_PASSWORD}"
      MYSQL_ROOT_HOST: "%"
      MYSQL_DATABASE: "$${DB_DATABASE}"
      MYSQL_USER: "$${DB_USERNAME}"
      MYSQL_PASSWORD: "$${DB_PASSWORD}"
    volumes:
      - "mysql_data:/var/lib/mysql"
    networks:
      - app
      - accessible
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -p$${DB_PASSWORD}"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      labels:
        - traefik.enable=true
        - traefik.tcp.routers.${full_app_name}-db.rule=HostSNI(`*`)
        - traefik.tcp.services.${full_app_name}-db.loadbalancer.server.port=$${DB_PORT}
        - traefik.tcp.routers.${full_app_name}-db.entrypoints=database-${traefik_db_port}
      mode: replicated
      # DO NOT REPLICATE MORE THAN ONCE
      replicas: 1
      restart_policy:
        condition: any
      rollback_config:
        order: start-first
      update_config:
        order: start-first
        failure_action: rollback

  ${full_app_name}-kafka:
    image: apache/kafka:4.0.0
    environment:
      KAFKA_NODE_ID: "1"
      KAFKA_PROCESS_ROLES: broker, controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@${full_app_name}-kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${full_app_name}-kafka:9092,CONTROLLER://${full_app_name}-kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CLUSTER_ID: $${KAFKA_CLUSTER_ID}
    networks:
      - app
    volumes:
      - kafka_data:/var/lib/kafka/data
    deploy:
      mode: replicated
      # DO NOT REPLICATE MORE THAN ONCE
      replicas: 1
      restart_policy:
        condition: any
      rollback_config:
        order: start-first
      update_config:
        order: start-first
        failure_action: rollback

  ${full_app_name}-kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    environment:
      KAFKA_CLUSTERS_0_NAME: default
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${full_app_name}-kafka:9092
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: PLAINTEXT
    networks:
      - app
      - accessible
    healthcheck:
      test: ["CMD-SHELL", "wget -qO /dev/null http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
      rollback_config:
        order: start-first
      update_config:
        order: start-first
        failure_action: rollback
      labels:
        - traefik.enable=true
        - traefik.http.routers.${full_app_name}-kafka.rule=Host(`$${KAFKA_DASHBOARD_URL}`)
        - traefik.http.routers.${full_app_name}-kafka.entrypoints=websecure
        - traefik.http.services.${full_app_name}-kafka.loadbalancer.server.port=8080

networks:
  app:
    driver: overlay
  accessible:
    external: true
volumes:
  mysql_data:
    driver: local
  kafka_data:
    driver: local